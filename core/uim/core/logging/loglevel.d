/****************************************************************************************************************
* Copyright: © 2018-2025 Ozan Nurettin Süel (aka UIManufaktur)                                                  *
* License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file.         *
* Authors: Ozan Nurettin Süel (aka UIManufaktur)                                                                *
*****************************************************************************************************************/
module uim.core.logging.loglevel;

import uim.core;

@safe:

class DLogLevels {
    // #region Singleton
  protected static DLogLevels _logLevels;
  public static DLogLevels logLevels() {
    return (_logLevels is null)
      ? _logLevels = new DLogLevels()
      : _logLevels;
  }
  // #endregion Singleton

  this() {
    // Map error codes to error levels.
    _levelMap = [
      "ERROR": "error", // Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.
      "WARNING": "warning", // Run-time warnings (non-fatal errors). Execution of the script is not halted.
      "PARSE": "error", // Compile-time parse errors. Parse errors should only be generated by the parser.
      "NOTICE": "notice",
      "CORE_ERROR": "error",
      "CORE_WARNING": "warning",
      "COMPILER_ERROR": "error", // ERRORS.COMPILER_ERROR - 
      "COMPILER_WARNING": "warning", // ERRORS.COMPILER_WARNING
      "USER_ERROR": "error", // ERRORS.USER_ERROR
      "USER_WARNING": "warning",
      "RECOVERABLE_ERROR": "warning",
      "USER_NOTICE": "notice",
      "STRICT": "strict",
      "DEPRECATED": "deprecated",
      "USER_DEPRECATED": "deprecated",
      "INFO": "info",
    ];
    _defaultLogLevel = "info";
  }

  // #region defaultLogLevel
  // Get/Set the default log level.
  protected string _defaultLogLevel;
  void defaultLogLevel(string level) {
    _defaultLogLevel = _levelMap.get(level, "unknown");
  }

  string defaultLogLevel() {
    return _defaultLogLevel;
  }
  // #endregion defaultLogLevel

  // #region levelMap
  protected string[string] _levelMap;
  void levelMap(string[string] levels) {
    _levelMap = levels.dup;
  }

  string[string] levelMap() {
    return _levelMap;
  }
  // #endregion levelMap

  // #region label
  string label(string level, string defaultValue = "info") {
    return levelMap.get(level, defaultValue is null ? defaultLogLevel : defaultValue);
  }
  // #endregion label

  // #region level
  string level(string label) {
    foreach (key, value; levelMap) {
      if (value == label) {
        return key;
      }
    }
    return null;
  }
  // #endregion level
}

auto LogLevels() {
  return DLogLevels.logLevels();
}

string logLevel(string level, string defaultValue = "info") {
  return LogLevels().label(level, defaultValue);
}