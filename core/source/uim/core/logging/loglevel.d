/****************************************************************************************************************
* Copyright: © 2018-2025 Ozan Nurettin Süel (aka UIManufaktur) 
* License: Subject to the terms of the Apache 2.0 license, as written in the included LICENSE.txt file.         *
* Authors: Ozan Nurettin Süel (aka UIManufaktur)                                                                *
*****************************************************************************************************************/
module uim.core.logging.loglevel;

import uim.core;

mixin(Version!("test_uim_core"));
@safe:

class DLogLevels {
  // #region Singleton
  protected static DLogLevels _logLevels;
  public static DLogLevels logLevels() {
    return (_logLevels is null)
      ? _logLevels = new DLogLevels() : _logLevels;
  }
  // #endregion Singleton

  this() {
    // Map error codes to error levels.
    _logMap = [ // label => level
      "ALERT": "warning", // A condition that should be corrected immediately, such as a corrupted database, an offline server, etc.
      "CRITICAL": "critical", // Error that severely influences the execution of the application
      "CRITICAL_ERROR": "error", // ERRORS.CRITICAL_ERROR - A critical error has occurred. This is a fatal error.
      "CRITICAL_WARNING": "warning", // ERRORS.CRITICAL_WARNING - A critical warning has occurred. This is a warning.
      "DEBUG": "debug", // Developer information useful for algorithm debugging
      "DEPRECATED": "deprecated",
      "DEPRECATED_FUNCTION": "deprecated", // ERRORS.DEPRECATED_FUNCTION - A deprecated function has been called. This is a warning.
      "DEPRECATED_FEATURE": "deprecated", // ERRORS.DEPRECATED_FEATURE - A deprecated feature has been used. This is a warning.
      "DEPRECATED_METHOD": "deprecated", // ERRORS.DEPRECATED_METHOD - A deprecated method has been called. This is a warning.
      "DEPRECATED_PROPERTY": "deprecated", // ERRORS.DEPRECATED_PROPERTY - A deprecated property has been used. This is a warning.
      "DEPRECATED_VARIABLE": "deprecated", // ERRORS.DEPRECATED_VARIABLE - A deprecated variable has been used. This is a warning.
      "EMERGENCY": "fatal", // A panic condition. This should be corrected immediately, such as a corrupted system database, etc.
      "ERROR": "error", // Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.
      "INFO": "info",
      "PARSE": "error", // Compile-time parse errors. Parse errors should only be generated by the parser.
      "NOTICE": "trace",
      "RECURSION_LIMIT": "error", // ERRORS.RECURSION_LIMIT - A recursion limit has been reached. This is a fatal error.
      "RECOVERABLE_ERROR": "warning",
      "SEVERE": "error", // Severe errors that prevent the application from continuing. These are not necessarily fatal errors, but they are serious enough to require immediate attention.
      "SIMPLE": "error", // Simple errors that are not necessarily fatal, but should be corrected. These are usually syntax errors or other simple mistakes.
      "UNKNOWN": "unkown",
      "USER_DEPRECATED": "deprecated", // ERRORS.USER_DEPRECATED - A deprecated feature has been used. This is a warning.
      "USER_ERROR": "error", // ERRORS.USER_ERROR
      "USER_NOTICE": "notice",
      "USER_RECOVERABLE_ERROR": "warning",
      "USER_SEVERE": "error", // ERRORS.USER_SEVERE - A severe error has occurred. This is a fatal error.
      "USER_WARNING": "warning",
      "WARNING": "warning",
      "STRICT": "strict",
      "TRACE": "trace", // Information for locating events when no useful stack traces are available
    ];

    _defaultLogLevel = "info";
  }

  // #region defaultLogLevel
  // Get/Set the default log level.
  protected string _defaultLogLevel;
  void defaultLogLevel(string level) {
    _defaultLogLevel = _logMap.get(level, "unknown");
  }

  string defaultLogLevel() {
    return _defaultLogLevel;
  }
  // #endregion defaultLogLevel

  // #region logMap
  protected string[string] _logMap;
  void logMap(string[string] levels) {
    _logMap = levels.dup;
  }

  string[string] logMap() {
    return _logMap;
  }
  // #endregion logMap

  // #region lebels
  // Get the log level for a given label.
  string[] labels(string level = null) {
    return (level.isEmpty)
      ? _logMap.keys : _logMap
      .keys
      .filter!(key => _logMap[key] == level).array;
  }

  string label(string label) {
    return _logMap.get(label, "unknown");
  }
  // #region lebels

  // #region level
  string level(string label) {
    return _logMap.get(label, "unknown");
  }
  // #endregion level
}

auto LogLevels() {
  return DLogLevels.logLevels();
}
